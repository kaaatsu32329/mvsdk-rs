/* automatically generated by rust-bindgen 0.59.2 */
#![allow(dead_code)]
#![warn(deref_nullptr)]
pub const CAMERA_STATUS_SUCCESS: u32 = 0;
pub const CAMERA_STATUS_FAILED: i32 = -1;
pub const CAMERA_STATUS_INTERNAL_ERROR: i32 = -2;
pub const CAMERA_STATUS_UNKNOW: i32 = -3;
pub const CAMERA_STATUS_NOT_SUPPORTED: i32 = -4;
pub const CAMERA_STATUS_NOT_INITIALIZED: i32 = -5;
pub const CAMERA_STATUS_PARAMETER_INVALID: i32 = -6;
pub const CAMERA_STATUS_PARAMETER_OUT_OF_BOUND: i32 = -7;
pub const CAMERA_STATUS_UNENABLED: i32 = -8;
pub const CAMERA_STATUS_USER_CANCEL: i32 = -9;
pub const CAMERA_STATUS_PATH_NOT_FOUND: i32 = -10;
pub const CAMERA_STATUS_SIZE_DISMATCH: i32 = -11;
pub const CAMERA_STATUS_TIME_OUT: i32 = -12;
pub const CAMERA_STATUS_IO_ERROR: i32 = -13;
pub const CAMERA_STATUS_COMM_ERROR: i32 = -14;
pub const CAMERA_STATUS_BUS_ERROR: i32 = -15;
pub const CAMERA_STATUS_NO_DEVICE_FOUND: i32 = -16;
pub const CAMERA_STATUS_NO_LOGIC_DEVICE_FOUND: i32 = -17;
pub const CAMERA_STATUS_DEVICE_IS_OPENED: i32 = -18;
pub const CAMERA_STATUS_DEVICE_IS_CLOSED: i32 = -19;
pub const CAMERA_STATUS_DEVICE_VEDIO_CLOSED: i32 = -20;
pub const CAMERA_STATUS_NO_MEMORY: i32 = -21;
pub const CAMERA_STATUS_FILE_CREATE_FAILED: i32 = -22;
pub const CAMERA_STATUS_FILE_INVALID: i32 = -23;
pub const CAMERA_STATUS_WRITE_PROTECTED: i32 = -24;
pub const CAMERA_STATUS_GRAB_FAILED: i32 = -25;
pub const CAMERA_STATUS_LOST_DATA: i32 = -26;
pub const CAMERA_STATUS_EOF_ERROR: i32 = -27;
pub const CAMERA_STATUS_BUSY: i32 = -28;
pub const CAMERA_STATUS_WAIT: i32 = -29;
pub const CAMERA_STATUS_IN_PROCESS: i32 = -30;
pub const CAMERA_STATUS_IIC_ERROR: i32 = -31;
pub const CAMERA_STATUS_SPI_ERROR: i32 = -32;
pub const CAMERA_STATUS_USB_CONTROL_ERROR: i32 = -33;
pub const CAMERA_STATUS_USB_BULK_ERROR: i32 = -34;
pub const CAMERA_STATUS_SOCKET_INIT_ERROR: i32 = -35;
pub const CAMERA_STATUS_GIGE_FILTER_INIT_ERROR: i32 = -36;
pub const CAMERA_STATUS_NET_SEND_ERROR: i32 = -37;
pub const CAMERA_STATUS_DEVICE_LOST: i32 = -38;
pub const CAMERA_STATUS_DATA_RECV_LESS: i32 = -39;
pub const CAMERA_STATUS_FUNCTION_LOAD_FAILED: i32 = -40;
pub const CAMERA_STATUS_CRITICAL_FILE_LOST: i32 = -41;
pub const CAMERA_STATUS_SENSOR_ID_DISMATCH: i32 = -42;
pub const CAMERA_STATUS_OUT_OF_RANGE: i32 = -43;
pub const CAMERA_STATUS_REGISTRY_ERROR: i32 = -44;
pub const CAMERA_STATUS_ACCESS_DENY: i32 = -45;
pub const CAMERA_STATUS_CAMERA_NEED_RESET: i32 = -46;
pub const CAMERA_STATUS_ISP_MOUDLE_NOT_INITIALIZED: i32 = -47;
pub const CAMERA_STATUS_ISP_DATA_CRC_ERROR: i32 = -48;
pub const CAMERA_STATUS_MV_TEST_FAILED: i32 = -49;
pub const CAMERA_STATUS_INTERNAL_ERR1: i32 = -50;
pub const CAMERA_STATUS_U3V_NO_CONTROL_EP: i32 = -51;
pub const CAMERA_STATUS_U3V_CONTROL_ERROR: i32 = -52;
pub const CAMERA_AIA_PACKET_RESEND: u32 = 256;
pub const CAMERA_AIA_NOT_IMPLEMENTED: u32 = 32769;
pub const CAMERA_AIA_INVALID_PARAMETER: u32 = 32770;
pub const CAMERA_AIA_INVALID_ADDRESS: u32 = 32771;
pub const CAMERA_AIA_WRITE_PROTECT: u32 = 32772;
pub const CAMERA_AIA_BAD_ALIGNMENT: u32 = 32773;
pub const CAMERA_AIA_ACCESS_DENIED: u32 = 32774;
pub const CAMERA_AIA_BUSY: u32 = 32775;
pub const CAMERA_AIA_DEPRECATED: u32 = 32776;
pub const CAMERA_AIA_PACKET_UNAVAILABLE: u32 = 32780;
pub const CAMERA_AIA_DATA_OVERRUN: u32 = 32781;
pub const CAMERA_AIA_INVALID_HEADER: u32 = 32782;
pub const CAMERA_AIA_PACKET_NOT_YET_AVAILABLE: u32 = 32784;
pub const CAMERA_AIA_PACKET_AND_PREV_REMOVED_FROM_MEMORY: u32 = 32785;
pub const CAMERA_AIA_PACKET_REMOVED_FROM_MEMORY: u32 = 32786;
pub const CAMERA_AIA_NO_REF_TIME: u32 = 2067;
pub const CAMERA_AIA_PACKET_TEMPORARILY_UNAVAILABLE: u32 = 2068;
pub const CAMERA_AIA_OVERFLOW: u32 = 2069;
pub const CAMERA_AIA_ACTION_LATE: u32 = 2070;
pub const CAMERA_AIA_ERROR: u32 = 36863;
pub const MAX_CROSS_LINE: u32 = 9;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const EXT_TRIG_MASK_GRR_SHUTTER: u32 = 1;
pub const EXT_TRIG_MASK_LEVEL_MODE: u32 = 2;
pub const EXT_TRIG_MASK_DOUBLE_EDGE: u32 = 4;
pub const MASK_2X2_HD: u32 = 1;
pub const MASK_3X3_HD: u32 = 2;
pub const MASK_4X4_HD: u32 = 4;
pub const MASK_5X5_HD: u32 = 8;
pub const MASK_6X6_HD: u32 = 16;
pub const MASK_7X7_HD: u32 = 32;
pub const MASK_8X8_HD: u32 = 64;
pub const MASK_9X9_HD: u32 = 128;
pub const MASK_10X10_HD: u32 = 256;
pub const MASK_11X11_HD: u32 = 512;
pub const MASK_12X12_HD: u32 = 1024;
pub const MASK_13X13_HD: u32 = 2048;
pub const MASK_14X14_HD: u32 = 4096;
pub const MASK_15X15_HD: u32 = 8192;
pub const MASK_16X16_HD: u32 = 16384;
pub const MASK_17X17_HD: u32 = 32768;
pub const MASK_2X2_SW: u32 = 65536;
pub const MASK_3X3_SW: u32 = 131072;
pub const MASK_4X4_SW: u32 = 262144;
pub const MASK_5X5_SW: u32 = 524288;
pub const MASK_6X6_SW: u32 = 1048576;
pub const MASK_7X7_SW: u32 = 2097152;
pub const MASK_8X8_SW: u32 = 4194304;
pub const MASK_9X9_SW: u32 = 8388608;
pub const MASK_10X10_SW: u32 = 16777216;
pub const MASK_11X11_SW: u32 = 33554432;
pub const MASK_12X12_SW: u32 = 67108864;
pub const MASK_13X13_SW: u32 = 134217728;
pub const MASK_14X14_SW: u32 = 268435456;
pub const MASK_15X15_SW: u32 = 536870912;
pub const MASK_16X16_SW: u32 = 1073741824;
pub const MASK_17X17_SW: u32 = 2147483648;
pub const CAMERA_MEDIA_TYPE_MONO: u32 = 16777216;
pub const CAMERA_MEDIA_TYPE_RGB: u32 = 33554432;
pub const CAMERA_MEDIA_TYPE_COLOR: u32 = 33554432;
pub const CAMERA_MEDIA_TYPE_CUSTOM: u32 = 2147483648;
pub const CAMERA_MEDIA_TYPE_COLOR_MASK: u32 = 4278190080;
pub const CAMERA_MEDIA_TYPE_OCCUPY1BIT: u32 = 65536;
pub const CAMERA_MEDIA_TYPE_OCCUPY2BIT: u32 = 131072;
pub const CAMERA_MEDIA_TYPE_OCCUPY4BIT: u32 = 262144;
pub const CAMERA_MEDIA_TYPE_OCCUPY8BIT: u32 = 524288;
pub const CAMERA_MEDIA_TYPE_OCCUPY10BIT: u32 = 655360;
pub const CAMERA_MEDIA_TYPE_OCCUPY12BIT: u32 = 786432;
pub const CAMERA_MEDIA_TYPE_OCCUPY16BIT: u32 = 1048576;
pub const CAMERA_MEDIA_TYPE_OCCUPY24BIT: u32 = 1572864;
pub const CAMERA_MEDIA_TYPE_OCCUPY32BIT: u32 = 2097152;
pub const CAMERA_MEDIA_TYPE_OCCUPY36BIT: u32 = 2359296;
pub const CAMERA_MEDIA_TYPE_OCCUPY48BIT: u32 = 3145728;
pub const CAMERA_MEDIA_TYPE_OCCUPY64BIT: u32 = 4194304;
pub const CAMERA_MEDIA_TYPE_EFFECTIVE_PIXEL_SIZE_MASK: u32 = 16711680;
pub const CAMERA_MEDIA_TYPE_EFFECTIVE_PIXEL_SIZE_SHIFT: u32 = 16;
pub const CAMERA_MEDIA_TYPE_ID_MASK: u32 = 65535;
pub const CAMERA_MEDIA_TYPE_COUNT: u32 = 70;
pub const CAMERA_MEDIA_TYPE_MONO1P: u32 = 16842807;
pub const CAMERA_MEDIA_TYPE_MONO2P: u32 = 16908344;
pub const CAMERA_MEDIA_TYPE_MONO4P: u32 = 17039417;
pub const CAMERA_MEDIA_TYPE_MONO8: u32 = 17301505;
pub const CAMERA_MEDIA_TYPE_MONO8S: u32 = 17301506;
pub const CAMERA_MEDIA_TYPE_MONO10: u32 = 17825795;
pub const CAMERA_MEDIA_TYPE_MONO10_PACKED: u32 = 17563652;
pub const CAMERA_MEDIA_TYPE_MONO12: u32 = 17825797;
pub const CAMERA_MEDIA_TYPE_MONO12_PACKED: u32 = 17563654;
pub const CAMERA_MEDIA_TYPE_MONO14: u32 = 17825829;
pub const CAMERA_MEDIA_TYPE_MONO16: u32 = 17825799;
pub const CAMERA_MEDIA_TYPE_BAYGR8: u32 = 17301512;
pub const CAMERA_MEDIA_TYPE_BAYRG8: u32 = 17301513;
pub const CAMERA_MEDIA_TYPE_BAYGB8: u32 = 17301514;
pub const CAMERA_MEDIA_TYPE_BAYBG8: u32 = 17301515;
pub const CAMERA_MEDIA_TYPE_BAYGR10_MIPI: u32 = 17432614;
pub const CAMERA_MEDIA_TYPE_BAYRG10_MIPI: u32 = 17432615;
pub const CAMERA_MEDIA_TYPE_BAYGB10_MIPI: u32 = 17432616;
pub const CAMERA_MEDIA_TYPE_BAYBG10_MIPI: u32 = 17432617;
pub const CAMERA_MEDIA_TYPE_BAYGR10: u32 = 17825804;
pub const CAMERA_MEDIA_TYPE_BAYRG10: u32 = 17825805;
pub const CAMERA_MEDIA_TYPE_BAYGB10: u32 = 17825806;
pub const CAMERA_MEDIA_TYPE_BAYBG10: u32 = 17825807;
pub const CAMERA_MEDIA_TYPE_BAYGR12: u32 = 17825808;
pub const CAMERA_MEDIA_TYPE_BAYRG12: u32 = 17825809;
pub const CAMERA_MEDIA_TYPE_BAYGB12: u32 = 17825810;
pub const CAMERA_MEDIA_TYPE_BAYBG12: u32 = 17825811;
pub const CAMERA_MEDIA_TYPE_BAYGR10_PACKED: u32 = 17563686;
pub const CAMERA_MEDIA_TYPE_BAYRG10_PACKED: u32 = 17563687;
pub const CAMERA_MEDIA_TYPE_BAYGB10_PACKED: u32 = 17563688;
pub const CAMERA_MEDIA_TYPE_BAYBG10_PACKED: u32 = 17563689;
pub const CAMERA_MEDIA_TYPE_BAYGR12_PACKED: u32 = 17563690;
pub const CAMERA_MEDIA_TYPE_BAYRG12_PACKED: u32 = 17563691;
pub const CAMERA_MEDIA_TYPE_BAYGB12_PACKED: u32 = 17563692;
pub const CAMERA_MEDIA_TYPE_BAYBG12_PACKED: u32 = 17563693;
pub const CAMERA_MEDIA_TYPE_BAYGR16: u32 = 17825838;
pub const CAMERA_MEDIA_TYPE_BAYRG16: u32 = 17825839;
pub const CAMERA_MEDIA_TYPE_BAYGB16: u32 = 17825840;
pub const CAMERA_MEDIA_TYPE_BAYBG16: u32 = 17825841;
pub const CAMERA_MEDIA_TYPE_RGB8: u32 = 35127316;
pub const CAMERA_MEDIA_TYPE_BGR8: u32 = 35127317;
pub const CAMERA_MEDIA_TYPE_RGBA8: u32 = 35651606;
pub const CAMERA_MEDIA_TYPE_BGRA8: u32 = 35651607;
pub const CAMERA_MEDIA_TYPE_RGB10: u32 = 36700184;
pub const CAMERA_MEDIA_TYPE_BGR10: u32 = 36700185;
pub const CAMERA_MEDIA_TYPE_RGB12: u32 = 36700186;
pub const CAMERA_MEDIA_TYPE_BGR12: u32 = 36700187;
pub const CAMERA_MEDIA_TYPE_RGB16: u32 = 36700211;
pub const CAMERA_MEDIA_TYPE_BGR16: u32 = 36700235;
pub const CAMERA_MEDIA_TYPE_RGBA16: u32 = 37748836;
pub const CAMERA_MEDIA_TYPE_BGRA16: u32 = 37748817;
pub const CAMERA_MEDIA_TYPE_RGB10V1_PACKED: u32 = 35651612;
pub const CAMERA_MEDIA_TYPE_RGB10P32: u32 = 35651613;
pub const CAMERA_MEDIA_TYPE_RGB12V1_PACKED: u32 = 35913780;
pub const CAMERA_MEDIA_TYPE_RGB565P: u32 = 34603061;
pub const CAMERA_MEDIA_TYPE_BGR565P: u32 = 34603062;
pub const CAMERA_MEDIA_TYPE_YUV411_8_UYYVYY: u32 = 34340894;
pub const CAMERA_MEDIA_TYPE_YUV422_8_UYVY: u32 = 34603039;
pub const CAMERA_MEDIA_TYPE_YUV422_8: u32 = 34603058;
pub const CAMERA_MEDIA_TYPE_YUV8_UYV: u32 = 35127328;
pub const CAMERA_MEDIA_TYPE_YCBCR8_CBYCR: u32 = 35127354;
pub const CAMERA_MEDIA_TYPE_YCBCR422_8: u32 = 34603067;
pub const CAMERA_MEDIA_TYPE_YCBCR422_8_CBYCRY: u32 = 34603075;
pub const CAMERA_MEDIA_TYPE_YCBCR411_8_CBYYCRYY: u32 = 34340924;
pub const CAMERA_MEDIA_TYPE_YCBCR601_8_CBYCR: u32 = 35127357;
pub const CAMERA_MEDIA_TYPE_YCBCR601_422_8: u32 = 34603070;
pub const CAMERA_MEDIA_TYPE_YCBCR601_422_8_CBYCRY: u32 = 34603076;
pub const CAMERA_MEDIA_TYPE_YCBCR601_411_8_CBYYCRYY: u32 = 34340927;
pub const CAMERA_MEDIA_TYPE_YCBCR709_8_CBYCR: u32 = 35127360;
pub const CAMERA_MEDIA_TYPE_YCBCR709_422_8: u32 = 34603073;
pub const CAMERA_MEDIA_TYPE_YCBCR709_422_8_CBYCRY: u32 = 34603077;
pub const CAMERA_MEDIA_TYPE_YCBCR709_411_8_CBYYCRYY: u32 = 34340930;
pub const CAMERA_MEDIA_TYPE_RGB8_PLANAR: u32 = 35127329;
pub const CAMERA_MEDIA_TYPE_RGB10_PLANAR: u32 = 36700194;
pub const CAMERA_MEDIA_TYPE_RGB12_PLANAR: u32 = 36700195;
pub const CAMERA_MEDIA_TYPE_RGB16_PLANAR: u32 = 36700196;
pub const CAMERA_MEDIA_TYPE_BAYGR12_PACKED_MV: u32 = 17563744;
pub const CAMERA_MEDIA_TYPE_BAYRG12_PACKED_MV: u32 = 17563745;
pub const CAMERA_MEDIA_TYPE_BAYGB12_PACKED_MV: u32 = 17563746;
pub const CAMERA_MEDIA_TYPE_BAYBG12_PACKED_MV: u32 = 17563747;
pub const CAMERA_MEDIA_TYPE_MONO12_PACKED_MV: u32 = 17563748;
pub const CAMERA_MEDIA_TYPE_YUV420P_MV: u32 = 34340965;
pub type CameraSdkStatus = ::std::os::raw::c_int;
pub type CameraHandle = ::std::os::raw::c_int;
pub type INT = ::std::os::raw::c_int;
pub type LONG = ::std::os::raw::c_int;
pub type UINT = ::std::os::raw::c_uint;
pub type UINT64 = ::std::os::raw::c_ulonglong;
pub type BOOL = ::std::os::raw::c_int;
pub type BYTE = ::std::os::raw::c_uchar;
pub type DWORD = ::std::os::raw::c_uint;
pub type PVOID = *mut ::std::os::raw::c_void;
pub type HWND = *mut ::std::os::raw::c_void;
pub type LPCTSTR = *mut ::std::os::raw::c_char;
pub type USHORT = ::std::os::raw::c_ushort;
pub type SHORT = ::std::os::raw::c_short;
pub type LPBYTE = *mut ::std::os::raw::c_uchar;
pub type CHAR = ::std::os::raw::c_char;
pub type TCHAR = ::std::os::raw::c_char;
pub type WORD = ::std::os::raw::c_ushort;
pub type HANDLE = INT;
pub type VOID = ::std::os::raw::c_void;
pub type ULONG = ::std::os::raw::c_uint;
pub type LPVOID = *mut ::std::os::raw::c_void;
pub type UCHAR = ::std::os::raw::c_uchar;
pub type HMODULE = *mut ::std::os::raw::c_void;
pub const emSdkLutMode_LUTMODE_PARAM_GEN: emSdkLutMode = 0;
pub const emSdkLutMode_LUTMODE_PRESET: emSdkLutMode = 1;
pub const emSdkLutMode_LUTMODE_USER_DEF: emSdkLutMode = 2;
pub type emSdkLutMode = ::std::os::raw::c_uint;
pub const emSdkRunMode_RUNMODE_PLAY: emSdkRunMode = 0;
pub const emSdkRunMode_RUNMODE_PAUSE: emSdkRunMode = 1;
pub const emSdkRunMode_RUNMODE_STOP: emSdkRunMode = 2;
pub type emSdkRunMode = ::std::os::raw::c_uint;
pub const emSdkDisplayMode_DISPLAYMODE_SCALE: emSdkDisplayMode = 0;
pub const emSdkDisplayMode_DISPLAYMODE_REAL: emSdkDisplayMode = 1;
pub type emSdkDisplayMode = ::std::os::raw::c_uint;
pub const emSdkRecordMode_RECORD_STOP: emSdkRecordMode = 0;
pub const emSdkRecordMode_RECORD_START: emSdkRecordMode = 1;
pub const emSdkRecordMode_RECORD_PAUSE: emSdkRecordMode = 2;
pub type emSdkRecordMode = ::std::os::raw::c_uint;
pub const emSdkMirrorDirection_MIRROR_DIRECTION_HORIZONTAL: emSdkMirrorDirection = 0;
pub const emSdkMirrorDirection_MIRROR_DIRECTION_VERTICAL: emSdkMirrorDirection = 1;
pub type emSdkMirrorDirection = ::std::os::raw::c_uint;
pub const emSdkRotateDirection_ROTATE_DIRECTION_0: emSdkRotateDirection = 0;
pub const emSdkRotateDirection_ROTATE_DIRECTION_90: emSdkRotateDirection = 1;
pub const emSdkRotateDirection_ROTATE_DIRECTION_180: emSdkRotateDirection = 2;
pub const emSdkRotateDirection_ROTATE_DIRECTION_270: emSdkRotateDirection = 3;
pub type emSdkRotateDirection = ::std::os::raw::c_uint;
pub const emSdkFrameSpeed_FRAME_SPEED_LOW: emSdkFrameSpeed = 0;
pub const emSdkFrameSpeed_FRAME_SPEED_NORMAL: emSdkFrameSpeed = 1;
pub const emSdkFrameSpeed_FRAME_SPEED_HIGH: emSdkFrameSpeed = 2;
pub const emSdkFrameSpeed_FRAME_SPEED_SUPER: emSdkFrameSpeed = 3;
pub type emSdkFrameSpeed = ::std::os::raw::c_uint;
pub const emSdkFileType_FILE_JPG: emSdkFileType = 1;
pub const emSdkFileType_FILE_BMP: emSdkFileType = 2;
pub const emSdkFileType_FILE_RAW: emSdkFileType = 4;
pub const emSdkFileType_FILE_PNG: emSdkFileType = 8;
pub const emSdkFileType_FILE_BMP_8BIT: emSdkFileType = 16;
pub const emSdkFileType_FILE_PNG_8BIT: emSdkFileType = 32;
pub const emSdkFileType_FILE_RAW_16BIT: emSdkFileType = 64;
pub type emSdkFileType = ::std::os::raw::c_uint;
pub const emSdkSnapMode_CONTINUATION: emSdkSnapMode = 0;
pub const emSdkSnapMode_SOFT_TRIGGER: emSdkSnapMode = 1;
pub const emSdkSnapMode_EXTERNAL_TRIGGER: emSdkSnapMode = 2;
pub type emSdkSnapMode = ::std::os::raw::c_uint;
pub const emSdkLightFrequency_LIGHT_FREQUENCY_50HZ: emSdkLightFrequency = 0;
pub const emSdkLightFrequency_LIGHT_FREQUENCY_60HZ: emSdkLightFrequency = 1;
pub type emSdkLightFrequency = ::std::os::raw::c_uint;
pub const emSdkParameterTeam_PARAMETER_TEAM_DEFAULT: emSdkParameterTeam = 255;
pub const emSdkParameterTeam_PARAMETER_TEAM_A: emSdkParameterTeam = 0;
pub const emSdkParameterTeam_PARAMETER_TEAM_B: emSdkParameterTeam = 1;
pub const emSdkParameterTeam_PARAMETER_TEAM_C: emSdkParameterTeam = 2;
pub const emSdkParameterTeam_PARAMETER_TEAM_D: emSdkParameterTeam = 3;
pub type emSdkParameterTeam = ::std::os::raw::c_uint;
pub const emSdkParameterMode_PARAM_MODE_BY_MODEL: emSdkParameterMode = 0;
pub const emSdkParameterMode_PARAM_MODE_BY_NAME: emSdkParameterMode = 1;
pub const emSdkParameterMode_PARAM_MODE_BY_SN: emSdkParameterMode = 2;
pub const emSdkParameterMode_PARAM_MODE_IN_DEVICE: emSdkParameterMode = 3;
pub type emSdkParameterMode = ::std::os::raw::c_uint;
pub const emSdkPropSheetMask_PROP_SHEET_INDEX_EXPOSURE: emSdkPropSheetMask = 0;
pub const emSdkPropSheetMask_PROP_SHEET_INDEX_ISP_COLOR: emSdkPropSheetMask = 1;
pub const emSdkPropSheetMask_PROP_SHEET_INDEX_ISP_LUT: emSdkPropSheetMask = 2;
pub const emSdkPropSheetMask_PROP_SHEET_INDEX_ISP_SHAPE: emSdkPropSheetMask = 3;
pub const emSdkPropSheetMask_PROP_SHEET_INDEX_VIDEO_FORMAT: emSdkPropSheetMask = 4;
pub const emSdkPropSheetMask_PROP_SHEET_INDEX_RESOLUTION: emSdkPropSheetMask = 5;
pub const emSdkPropSheetMask_PROP_SHEET_INDEX_IO_CTRL: emSdkPropSheetMask = 6;
pub const emSdkPropSheetMask_PROP_SHEET_INDEX_TRIGGER_SET: emSdkPropSheetMask = 7;
pub const emSdkPropSheetMask_PROP_SHEET_INDEX_OVERLAY: emSdkPropSheetMask = 8;
pub const emSdkPropSheetMask_PROP_SHEET_INDEX_DEVICE_INFO: emSdkPropSheetMask = 9;
pub const emSdkPropSheetMask_PROP_SHEET_INDEX_WDR: emSdkPropSheetMask = 10;
pub const emSdkPropSheetMask_PROP_SHEET_INDEX_MULTI_EXPOSURE: emSdkPropSheetMask = 11;
pub type emSdkPropSheetMask = ::std::os::raw::c_uint;
pub const emSdkPropSheetMsg_SHEET_MSG_LOAD_PARAM_DEFAULT: emSdkPropSheetMsg = 0;
pub const emSdkPropSheetMsg_SHEET_MSG_LOAD_PARAM_GROUP: emSdkPropSheetMsg = 1;
pub const emSdkPropSheetMsg_SHEET_MSG_LOAD_PARAM_FROMFILE: emSdkPropSheetMsg = 2;
pub const emSdkPropSheetMsg_SHEET_MSG_SAVE_PARAM_GROUP: emSdkPropSheetMsg = 3;
pub type emSdkPropSheetMsg = ::std::os::raw::c_uint;
pub const emSdkRefWinType_REF_WIN_AUTO_EXPOSURE: emSdkRefWinType = 0;
pub const emSdkRefWinType_REF_WIN_WHITE_BALANCE: emSdkRefWinType = 1;
pub type emSdkRefWinType = ::std::os::raw::c_uint;
pub const emSdkResolutionMode_RES_MODE_PREVIEW: emSdkResolutionMode = 0;
pub const emSdkResolutionMode_RES_MODE_SNAPSHOT: emSdkResolutionMode = 1;
pub type emSdkResolutionMode = ::std::os::raw::c_uint;
pub const emSdkClrTmpMode_CT_MODE_AUTO: emSdkClrTmpMode = 0;
pub const emSdkClrTmpMode_CT_MODE_PRESET: emSdkClrTmpMode = 1;
pub const emSdkClrTmpMode_CT_MODE_USER_DEF: emSdkClrTmpMode = 2;
pub type emSdkClrTmpMode = ::std::os::raw::c_uint;
pub const emSdkLutChannel_LUT_CHANNEL_ALL: emSdkLutChannel = 0;
pub const emSdkLutChannel_LUT_CHANNEL_RED: emSdkLutChannel = 1;
pub const emSdkLutChannel_LUT_CHANNEL_GREEN: emSdkLutChannel = 2;
pub const emSdkLutChannel_LUT_CHANNEL_BLUE: emSdkLutChannel = 3;
pub type emSdkLutChannel = ::std::os::raw::c_uint;
pub const emSdkIspProcessor_ISP_PROCESSSOR_PC: emSdkIspProcessor = 0;
pub const emSdkIspProcessor_ISP_PROCESSSOR_DEVICE: emSdkIspProcessor = 1;
pub type emSdkIspProcessor = ::std::os::raw::c_uint;
pub const emStrobeControl_STROBE_SYNC_WITH_TRIG_AUTO: emStrobeControl = 0;
pub const emStrobeControl_STROBE_SYNC_WITH_TRIG_MANUAL: emStrobeControl = 1;
pub const emStrobeControl_STROBE_ALWAYS_HIGH: emStrobeControl = 2;
pub const emStrobeControl_STROBE_ALWAYS_LOW: emStrobeControl = 3;
pub type emStrobeControl = ::std::os::raw::c_uint;
pub const emExtTrigSignal_EXT_TRIG_LEADING_EDGE: emExtTrigSignal = 0;
pub const emExtTrigSignal_EXT_TRIG_TRAILING_EDGE: emExtTrigSignal = 1;
pub const emExtTrigSignal_EXT_TRIG_HIGH_LEVEL: emExtTrigSignal = 2;
pub const emExtTrigSignal_EXT_TRIG_LOW_LEVEL: emExtTrigSignal = 3;
pub type emExtTrigSignal = ::std::os::raw::c_uint;
pub const emExtTrigShutterMode_EXT_TRIG_EXP_STANDARD: emExtTrigShutterMode = 0;
pub const emExtTrigShutterMode_EXT_TRIG_EXP_GRR: emExtTrigShutterMode = 1;
pub type emExtTrigShutterMode = ::std::os::raw::c_uint;
pub const emCameraGPIOMode_IOMODE_TRIG_INPUT: emCameraGPIOMode = 0;
#[doc = "\\~english Trigger input"]
pub const emCameraGPIOMode_IOMODE_STROBE_OUTPUT: emCameraGPIOMode = 1;
#[doc = "\\~english Strobe output"]
pub const emCameraGPIOMode_IOMODE_GP_INPUT: emCameraGPIOMode = 2;
#[doc = "\\~english Universal input"]
pub const emCameraGPIOMode_IOMODE_GP_OUTPUT: emCameraGPIOMode = 3;
#[doc = "\\~english Universal output"]
pub const emCameraGPIOMode_IOMODE_PWM_OUTPUT: emCameraGPIOMode = 4;
#[doc = "\\~english PWM output"]
pub const emCameraGPIOMode_IOMODE_ROTARYENC_INPUT: emCameraGPIOMode = 5;
pub type emCameraGPIOMode = ::std::os::raw::c_uint;
#[doc = "<\\~english single ended"]
pub const emCameraGPIOFormat_IOFORMAT_SINGLE: emCameraGPIOFormat = 0;
#[doc = "<\\~english Differential RS422"]
pub const emCameraGPIOFormat_IOFORMAT_RS422: emCameraGPIOFormat = 1;
#[doc = "<\\~english Differential RS422 and Termination Enable"]
pub const emCameraGPIOFormat_IOFORMAT_RS422_TERM: emCameraGPIOFormat = 2;
pub type emCameraGPIOFormat = ::std::os::raw::c_uint;
#[doc = "< \\~english\tGet the oldest frame in the cache"]
pub const emCameraGetImagePriority_CAMERA_GET_IMAGE_PRIORITY_OLDEST: emCameraGetImagePriority = 0;
#[doc = "< \\~english Get the latest frame in the cache (older than this frame will be discarded)"]
pub const emCameraGetImagePriority_CAMERA_GET_IMAGE_PRIORITY_NEWEST: emCameraGetImagePriority = 1;
#[doc = " \\~english All frames in the cache are discarded, and if the camera is now being exposed or transmitted it will be immediately interrupted, waiting to receive the next frame"]
#[doc = " \\note Some models do not support this feature. For cameras that do not support this feature this flag is equivalent to @link #CAMERA_GET_IMAGE_PRIORITY_OLDEST @endlink"]
pub const emCameraGetImagePriority_CAMERA_GET_IMAGE_PRIORITY_NEXT: emCameraGetImagePriority = 2;
pub type emCameraGetImagePriority = ::std::os::raw::c_uint;
pub const emCameraSoftTriggerExFlags_CAMERA_ST_CLEAR_BUFFER_BEFORE: emCameraSoftTriggerExFlags = 1;
pub type emCameraSoftTriggerExFlags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct tSdkCameraDevInfo {
    pub acProductSeries: [::std::os::raw::c_char; 32usize],
    pub acProductName: [::std::os::raw::c_char; 32usize],
    pub acFriendlyName: [::std::os::raw::c_char; 32usize],
    pub acLinkName: [::std::os::raw::c_char; 32usize],
    pub acDriverVersion: [::std::os::raw::c_char; 32usize],
    pub acSensorType: [::std::os::raw::c_char; 32usize],
    pub acPortType: [::std::os::raw::c_char; 32usize],
    pub acSn: [::std::os::raw::c_char; 32usize],
    pub uInstance: UINT,
}
#[test]
fn bindgen_test_layout_tSdkCameraDevInfo() {
    assert_eq!(
        ::std::mem::size_of::<tSdkCameraDevInfo>(),
        260usize,
        concat!("Size of: ", stringify!(tSdkCameraDevInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<tSdkCameraDevInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(tSdkCameraDevInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraDevInfo>())).acProductSeries as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraDevInfo),
            "::",
            stringify!(acProductSeries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkCameraDevInfo>())).acProductName as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraDevInfo),
            "::",
            stringify!(acProductName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraDevInfo>())).acFriendlyName as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraDevInfo),
            "::",
            stringify!(acFriendlyName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkCameraDevInfo>())).acLinkName as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraDevInfo),
            "::",
            stringify!(acLinkName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraDevInfo>())).acDriverVersion as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraDevInfo),
            "::",
            stringify!(acDriverVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkCameraDevInfo>())).acSensorType as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraDevInfo),
            "::",
            stringify!(acSensorType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkCameraDevInfo>())).acPortType as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraDevInfo),
            "::",
            stringify!(acPortType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkCameraDevInfo>())).acSn as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraDevInfo),
            "::",
            stringify!(acSn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkCameraDevInfo>())).uInstance as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraDevInfo),
            "::",
            stringify!(uInstance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct tSdkResolutionRange {
    pub iHeightMax: INT,
    pub iHeightMin: INT,
    pub iWidthMax: INT,
    pub iWidthMin: INT,
    pub uSkipModeMask: UINT,
    pub uBinSumModeMask: UINT,
    pub uBinAverageModeMask: UINT,
    pub uResampleMask: UINT,
}
#[test]
fn bindgen_test_layout_tSdkResolutionRange() {
    assert_eq!(
        ::std::mem::size_of::<tSdkResolutionRange>(),
        32usize,
        concat!("Size of: ", stringify!(tSdkResolutionRange))
    );
    assert_eq!(
        ::std::mem::align_of::<tSdkResolutionRange>(),
        4usize,
        concat!("Alignment of ", stringify!(tSdkResolutionRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkResolutionRange>())).iHeightMax as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkResolutionRange),
            "::",
            stringify!(iHeightMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkResolutionRange>())).iHeightMin as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkResolutionRange),
            "::",
            stringify!(iHeightMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkResolutionRange>())).iWidthMax as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkResolutionRange),
            "::",
            stringify!(iWidthMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkResolutionRange>())).iWidthMin as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkResolutionRange),
            "::",
            stringify!(iWidthMin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkResolutionRange>())).uSkipModeMask as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkResolutionRange),
            "::",
            stringify!(uSkipModeMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkResolutionRange>())).uBinSumModeMask as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkResolutionRange),
            "::",
            stringify!(uBinSumModeMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkResolutionRange>())).uBinAverageModeMask as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkResolutionRange),
            "::",
            stringify!(uBinAverageModeMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkResolutionRange>())).uResampleMask as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkResolutionRange),
            "::",
            stringify!(uResampleMask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct tSdkImageResolution {
    pub iIndex: INT,
    pub acDescription: [::std::os::raw::c_char; 32usize],
    pub uBinSumMode: UINT,
    pub uBinAverageMode: UINT,
    pub uSkipMode: UINT,
    pub uResampleMask: UINT,
    pub iHOffsetFOV: INT,
    pub iVOffsetFOV: INT,
    pub iWidthFOV: INT,
    pub iHeightFOV: INT,
    pub iWidth: INT,
    pub iHeight: INT,
    pub iWidthZoomHd: INT,
    pub iHeightZoomHd: INT,
    pub iWidthZoomSw: INT,
    pub iHeightZoomSw: INT,
}
#[test]
fn bindgen_test_layout_tSdkImageResolution() {
    assert_eq!(
        ::std::mem::size_of::<tSdkImageResolution>(),
        92usize,
        concat!("Size of: ", stringify!(tSdkImageResolution))
    );
    assert_eq!(
        ::std::mem::align_of::<tSdkImageResolution>(),
        4usize,
        concat!("Alignment of ", stringify!(tSdkImageResolution))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkImageResolution>())).iIndex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkImageResolution),
            "::",
            stringify!(iIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkImageResolution>())).acDescription as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkImageResolution),
            "::",
            stringify!(acDescription)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkImageResolution>())).uBinSumMode as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkImageResolution),
            "::",
            stringify!(uBinSumMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkImageResolution>())).uBinAverageMode as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkImageResolution),
            "::",
            stringify!(uBinAverageMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkImageResolution>())).uSkipMode as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkImageResolution),
            "::",
            stringify!(uSkipMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkImageResolution>())).uResampleMask as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkImageResolution),
            "::",
            stringify!(uResampleMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkImageResolution>())).iHOffsetFOV as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkImageResolution),
            "::",
            stringify!(iHOffsetFOV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkImageResolution>())).iVOffsetFOV as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkImageResolution),
            "::",
            stringify!(iVOffsetFOV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkImageResolution>())).iWidthFOV as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkImageResolution),
            "::",
            stringify!(iWidthFOV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkImageResolution>())).iHeightFOV as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkImageResolution),
            "::",
            stringify!(iHeightFOV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkImageResolution>())).iWidth as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkImageResolution),
            "::",
            stringify!(iWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkImageResolution>())).iHeight as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkImageResolution),
            "::",
            stringify!(iHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkImageResolution>())).iWidthZoomHd as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkImageResolution),
            "::",
            stringify!(iWidthZoomHd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkImageResolution>())).iHeightZoomHd as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkImageResolution),
            "::",
            stringify!(iHeightZoomHd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkImageResolution>())).iWidthZoomSw as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkImageResolution),
            "::",
            stringify!(iWidthZoomSw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkImageResolution>())).iHeightZoomSw as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkImageResolution),
            "::",
            stringify!(iHeightZoomSw)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct tSdkColorTemperatureDes {
    pub iIndex: INT,
    pub acDescription: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_tSdkColorTemperatureDes() {
    assert_eq!(
        ::std::mem::size_of::<tSdkColorTemperatureDes>(),
        36usize,
        concat!("Size of: ", stringify!(tSdkColorTemperatureDes))
    );
    assert_eq!(
        ::std::mem::align_of::<tSdkColorTemperatureDes>(),
        4usize,
        concat!("Alignment of ", stringify!(tSdkColorTemperatureDes))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkColorTemperatureDes>())).iIndex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkColorTemperatureDes),
            "::",
            stringify!(iIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkColorTemperatureDes>())).acDescription as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkColorTemperatureDes),
            "::",
            stringify!(acDescription)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct tSdkFrameSpeed {
    pub iIndex: INT,
    pub acDescription: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_tSdkFrameSpeed() {
    assert_eq!(
        ::std::mem::size_of::<tSdkFrameSpeed>(),
        36usize,
        concat!("Size of: ", stringify!(tSdkFrameSpeed))
    );
    assert_eq!(
        ::std::mem::align_of::<tSdkFrameSpeed>(),
        4usize,
        concat!("Alignment of ", stringify!(tSdkFrameSpeed))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkFrameSpeed>())).iIndex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkFrameSpeed),
            "::",
            stringify!(iIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkFrameSpeed>())).acDescription as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkFrameSpeed),
            "::",
            stringify!(acDescription)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct tSdkExpose {
    pub uiTargetMin: UINT,
    pub uiTargetMax: UINT,
    pub uiAnalogGainMin: UINT,
    pub uiAnalogGainMax: UINT,
    pub fAnalogGainStep: f32,
    pub uiExposeTimeMin: UINT,
    pub uiExposeTimeMax: UINT,
}
#[test]
fn bindgen_test_layout_tSdkExpose() {
    assert_eq!(
        ::std::mem::size_of::<tSdkExpose>(),
        28usize,
        concat!("Size of: ", stringify!(tSdkExpose))
    );
    assert_eq!(
        ::std::mem::align_of::<tSdkExpose>(),
        4usize,
        concat!("Alignment of ", stringify!(tSdkExpose))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkExpose>())).uiTargetMin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkExpose),
            "::",
            stringify!(uiTargetMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkExpose>())).uiTargetMax as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkExpose),
            "::",
            stringify!(uiTargetMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkExpose>())).uiAnalogGainMin as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkExpose),
            "::",
            stringify!(uiAnalogGainMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkExpose>())).uiAnalogGainMax as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkExpose),
            "::",
            stringify!(uiAnalogGainMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkExpose>())).fAnalogGainStep as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkExpose),
            "::",
            stringify!(fAnalogGainStep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkExpose>())).uiExposeTimeMin as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkExpose),
            "::",
            stringify!(uiExposeTimeMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkExpose>())).uiExposeTimeMax as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkExpose),
            "::",
            stringify!(uiExposeTimeMax)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct tSdkTrigger {
    pub iIndex: INT,
    pub acDescription: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_tSdkTrigger() {
    assert_eq!(
        ::std::mem::size_of::<tSdkTrigger>(),
        36usize,
        concat!("Size of: ", stringify!(tSdkTrigger))
    );
    assert_eq!(
        ::std::mem::align_of::<tSdkTrigger>(),
        4usize,
        concat!("Alignment of ", stringify!(tSdkTrigger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkTrigger>())).iIndex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkTrigger),
            "::",
            stringify!(iIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkTrigger>())).acDescription as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkTrigger),
            "::",
            stringify!(acDescription)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct tSdkPackLength {
    pub iIndex: INT,
    pub acDescription: [::std::os::raw::c_char; 32usize],
    pub iPackSize: UINT,
}
#[test]
fn bindgen_test_layout_tSdkPackLength() {
    assert_eq!(
        ::std::mem::size_of::<tSdkPackLength>(),
        40usize,
        concat!("Size of: ", stringify!(tSdkPackLength))
    );
    assert_eq!(
        ::std::mem::align_of::<tSdkPackLength>(),
        4usize,
        concat!("Alignment of ", stringify!(tSdkPackLength))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkPackLength>())).iIndex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkPackLength),
            "::",
            stringify!(iIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkPackLength>())).acDescription as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkPackLength),
            "::",
            stringify!(acDescription)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkPackLength>())).iPackSize as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkPackLength),
            "::",
            stringify!(iPackSize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct tSdkPresetLut {
    pub iIndex: INT,
    pub acDescription: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_tSdkPresetLut() {
    assert_eq!(
        ::std::mem::size_of::<tSdkPresetLut>(),
        36usize,
        concat!("Size of: ", stringify!(tSdkPresetLut))
    );
    assert_eq!(
        ::std::mem::align_of::<tSdkPresetLut>(),
        4usize,
        concat!("Alignment of ", stringify!(tSdkPresetLut))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkPresetLut>())).iIndex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkPresetLut),
            "::",
            stringify!(iIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkPresetLut>())).acDescription as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkPresetLut),
            "::",
            stringify!(acDescription)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct tSdkAeAlgorithm {
    pub iIndex: INT,
    pub acDescription: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_tSdkAeAlgorithm() {
    assert_eq!(
        ::std::mem::size_of::<tSdkAeAlgorithm>(),
        36usize,
        concat!("Size of: ", stringify!(tSdkAeAlgorithm))
    );
    assert_eq!(
        ::std::mem::align_of::<tSdkAeAlgorithm>(),
        4usize,
        concat!("Alignment of ", stringify!(tSdkAeAlgorithm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkAeAlgorithm>())).iIndex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkAeAlgorithm),
            "::",
            stringify!(iIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkAeAlgorithm>())).acDescription as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkAeAlgorithm),
            "::",
            stringify!(acDescription)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct tSdkBayerDecodeAlgorithm {
    pub iIndex: INT,
    pub acDescription: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_tSdkBayerDecodeAlgorithm() {
    assert_eq!(
        ::std::mem::size_of::<tSdkBayerDecodeAlgorithm>(),
        36usize,
        concat!("Size of: ", stringify!(tSdkBayerDecodeAlgorithm))
    );
    assert_eq!(
        ::std::mem::align_of::<tSdkBayerDecodeAlgorithm>(),
        4usize,
        concat!("Alignment of ", stringify!(tSdkBayerDecodeAlgorithm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkBayerDecodeAlgorithm>())).iIndex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkBayerDecodeAlgorithm),
            "::",
            stringify!(iIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkBayerDecodeAlgorithm>())).acDescription as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkBayerDecodeAlgorithm),
            "::",
            stringify!(acDescription)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct tSdkFrameStatistic {
    pub iTotal: INT,
    pub iCapture: INT,
    pub iLost: INT,
}
#[test]
fn bindgen_test_layout_tSdkFrameStatistic() {
    assert_eq!(
        ::std::mem::size_of::<tSdkFrameStatistic>(),
        12usize,
        concat!("Size of: ", stringify!(tSdkFrameStatistic))
    );
    assert_eq!(
        ::std::mem::align_of::<tSdkFrameStatistic>(),
        4usize,
        concat!("Alignment of ", stringify!(tSdkFrameStatistic))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkFrameStatistic>())).iTotal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkFrameStatistic),
            "::",
            stringify!(iTotal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkFrameStatistic>())).iCapture as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkFrameStatistic),
            "::",
            stringify!(iCapture)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkFrameStatistic>())).iLost as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkFrameStatistic),
            "::",
            stringify!(iLost)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct tSdkMediaType {
    pub iIndex: INT,
    pub acDescription: [::std::os::raw::c_char; 32usize],
    pub iMediaType: UINT,
}
#[test]
fn bindgen_test_layout_tSdkMediaType() {
    assert_eq!(
        ::std::mem::size_of::<tSdkMediaType>(),
        40usize,
        concat!("Size of: ", stringify!(tSdkMediaType))
    );
    assert_eq!(
        ::std::mem::align_of::<tSdkMediaType>(),
        4usize,
        concat!("Alignment of ", stringify!(tSdkMediaType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkMediaType>())).iIndex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkMediaType),
            "::",
            stringify!(iIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkMediaType>())).acDescription as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkMediaType),
            "::",
            stringify!(acDescription)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkMediaType>())).iMediaType as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkMediaType),
            "::",
            stringify!(iMediaType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct tGammaRange {
    pub iMin: INT,
    pub iMax: INT,
}
#[test]
fn bindgen_test_layout_tGammaRange() {
    assert_eq!(
        ::std::mem::size_of::<tGammaRange>(),
        8usize,
        concat!("Size of: ", stringify!(tGammaRange))
    );
    assert_eq!(
        ::std::mem::align_of::<tGammaRange>(),
        4usize,
        concat!("Alignment of ", stringify!(tGammaRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tGammaRange>())).iMin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tGammaRange),
            "::",
            stringify!(iMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tGammaRange>())).iMax as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tGammaRange),
            "::",
            stringify!(iMax)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct tContrastRange {
    pub iMin: INT,
    pub iMax: INT,
}
#[test]
fn bindgen_test_layout_tContrastRange() {
    assert_eq!(
        ::std::mem::size_of::<tContrastRange>(),
        8usize,
        concat!("Size of: ", stringify!(tContrastRange))
    );
    assert_eq!(
        ::std::mem::align_of::<tContrastRange>(),
        4usize,
        concat!("Alignment of ", stringify!(tContrastRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tContrastRange>())).iMin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tContrastRange),
            "::",
            stringify!(iMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tContrastRange>())).iMax as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tContrastRange),
            "::",
            stringify!(iMax)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct tRgbGainRange {
    pub iRGainMin: INT,
    pub iRGainMax: INT,
    pub iGGainMin: INT,
    pub iGGainMax: INT,
    pub iBGainMin: INT,
    pub iBGainMax: INT,
}
#[test]
fn bindgen_test_layout_tRgbGainRange() {
    assert_eq!(
        ::std::mem::size_of::<tRgbGainRange>(),
        24usize,
        concat!("Size of: ", stringify!(tRgbGainRange))
    );
    assert_eq!(
        ::std::mem::align_of::<tRgbGainRange>(),
        4usize,
        concat!("Alignment of ", stringify!(tRgbGainRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tRgbGainRange>())).iRGainMin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tRgbGainRange),
            "::",
            stringify!(iRGainMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tRgbGainRange>())).iRGainMax as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tRgbGainRange),
            "::",
            stringify!(iRGainMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tRgbGainRange>())).iGGainMin as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tRgbGainRange),
            "::",
            stringify!(iGGainMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tRgbGainRange>())).iGGainMax as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tRgbGainRange),
            "::",
            stringify!(iGGainMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tRgbGainRange>())).iBGainMin as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tRgbGainRange),
            "::",
            stringify!(iBGainMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tRgbGainRange>())).iBGainMax as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tRgbGainRange),
            "::",
            stringify!(iBGainMax)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct tSaturationRange {
    pub iMin: INT,
    pub iMax: INT,
}
#[test]
fn bindgen_test_layout_tSaturationRange() {
    assert_eq!(
        ::std::mem::size_of::<tSaturationRange>(),
        8usize,
        concat!("Size of: ", stringify!(tSaturationRange))
    );
    assert_eq!(
        ::std::mem::align_of::<tSaturationRange>(),
        4usize,
        concat!("Alignment of ", stringify!(tSaturationRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSaturationRange>())).iMin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tSaturationRange),
            "::",
            stringify!(iMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSaturationRange>())).iMax as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tSaturationRange),
            "::",
            stringify!(iMax)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct tSharpnessRange {
    pub iMin: INT,
    pub iMax: INT,
}
#[test]
fn bindgen_test_layout_tSharpnessRange() {
    assert_eq!(
        ::std::mem::size_of::<tSharpnessRange>(),
        8usize,
        concat!("Size of: ", stringify!(tSharpnessRange))
    );
    assert_eq!(
        ::std::mem::align_of::<tSharpnessRange>(),
        4usize,
        concat!("Alignment of ", stringify!(tSharpnessRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSharpnessRange>())).iMin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tSharpnessRange),
            "::",
            stringify!(iMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSharpnessRange>())).iMax as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tSharpnessRange),
            "::",
            stringify!(iMax)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct tSdkIspCapacity {
    pub bMonoSensor: BOOL,
    pub bWbOnce: BOOL,
    pub bAutoWb: BOOL,
    pub bAutoExposure: BOOL,
    pub bManualExposure: BOOL,
    pub bAntiFlick: BOOL,
    pub bDeviceIsp: BOOL,
    pub bForceUseDeviceIsp: BOOL,
    pub bZoomHD: BOOL,
}
#[test]
fn bindgen_test_layout_tSdkIspCapacity() {
    assert_eq!(
        ::std::mem::size_of::<tSdkIspCapacity>(),
        36usize,
        concat!("Size of: ", stringify!(tSdkIspCapacity))
    );
    assert_eq!(
        ::std::mem::align_of::<tSdkIspCapacity>(),
        4usize,
        concat!("Alignment of ", stringify!(tSdkIspCapacity))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkIspCapacity>())).bMonoSensor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkIspCapacity),
            "::",
            stringify!(bMonoSensor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkIspCapacity>())).bWbOnce as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkIspCapacity),
            "::",
            stringify!(bWbOnce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkIspCapacity>())).bAutoWb as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkIspCapacity),
            "::",
            stringify!(bAutoWb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkIspCapacity>())).bAutoExposure as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkIspCapacity),
            "::",
            stringify!(bAutoExposure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkIspCapacity>())).bManualExposure as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkIspCapacity),
            "::",
            stringify!(bManualExposure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkIspCapacity>())).bAntiFlick as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkIspCapacity),
            "::",
            stringify!(bAntiFlick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkIspCapacity>())).bDeviceIsp as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkIspCapacity),
            "::",
            stringify!(bDeviceIsp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkIspCapacity>())).bForceUseDeviceIsp as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkIspCapacity),
            "::",
            stringify!(bForceUseDeviceIsp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkIspCapacity>())).bZoomHD as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkIspCapacity),
            "::",
            stringify!(bZoomHD)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tSdkCameraCapbility {
    pub pTriggerDesc: *mut tSdkTrigger,
    pub iTriggerDesc: INT,
    pub pImageSizeDesc: *mut tSdkImageResolution,
    pub iImageSizeDesc: INT,
    pub pClrTempDesc: *mut tSdkColorTemperatureDes,
    pub iClrTempDesc: INT,
    pub pMediaTypeDesc: *mut tSdkMediaType,
    pub iMediaTypdeDesc: INT,
    pub pFrameSpeedDesc: *mut tSdkFrameSpeed,
    pub iFrameSpeedDesc: INT,
    pub pPackLenDesc: *mut tSdkPackLength,
    pub iPackLenDesc: INT,
    pub iOutputIoCounts: INT,
    pub iInputIoCounts: INT,
    pub pPresetLutDesc: *mut tSdkPresetLut,
    pub iPresetLut: INT,
    pub iUserDataMaxLen: INT,
    pub bParamInDevice: BOOL,
    pub pAeAlmSwDesc: *mut tSdkAeAlgorithm,
    pub iAeAlmSwDesc: ::std::os::raw::c_int,
    pub pAeAlmHdDesc: *mut tSdkAeAlgorithm,
    pub iAeAlmHdDesc: ::std::os::raw::c_int,
    pub pBayerDecAlmSwDesc: *mut tSdkBayerDecodeAlgorithm,
    pub iBayerDecAlmSwDesc: ::std::os::raw::c_int,
    pub pBayerDecAlmHdDesc: *mut tSdkBayerDecodeAlgorithm,
    pub iBayerDecAlmHdDesc: ::std::os::raw::c_int,
    pub sExposeDesc: tSdkExpose,
    pub sResolutionRange: tSdkResolutionRange,
    pub sRgbGainRange: tRgbGainRange,
    pub sSaturationRange: tSaturationRange,
    pub sGammaRange: tGammaRange,
    pub sContrastRange: tContrastRange,
    pub sSharpnessRange: tSharpnessRange,
    pub sIspCapacity: tSdkIspCapacity,
}
#[test]
fn bindgen_test_layout_tSdkCameraCapbility() {
    assert_eq!(
        ::std::mem::size_of::<tSdkCameraCapbility>(),
        344usize,
        concat!("Size of: ", stringify!(tSdkCameraCapbility))
    );
    assert_eq!(
        ::std::mem::align_of::<tSdkCameraCapbility>(),
        8usize,
        concat!("Alignment of ", stringify!(tSdkCameraCapbility))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).pTriggerDesc as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(pTriggerDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).iTriggerDesc as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(iTriggerDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).pImageSizeDesc as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(pImageSizeDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).iImageSizeDesc as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(iImageSizeDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).pClrTempDesc as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(pClrTempDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).iClrTempDesc as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(iClrTempDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).pMediaTypeDesc as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(pMediaTypeDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).iMediaTypdeDesc as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(iMediaTypdeDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).pFrameSpeedDesc as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(pFrameSpeedDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).iFrameSpeedDesc as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(iFrameSpeedDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).pPackLenDesc as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(pPackLenDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).iPackLenDesc as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(iPackLenDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).iOutputIoCounts as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(iOutputIoCounts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).iInputIoCounts as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(iInputIoCounts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).pPresetLutDesc as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(pPresetLutDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkCameraCapbility>())).iPresetLut as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(iPresetLut)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).iUserDataMaxLen as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(iUserDataMaxLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).bParamInDevice as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(bParamInDevice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).pAeAlmSwDesc as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(pAeAlmSwDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).iAeAlmSwDesc as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(iAeAlmSwDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).pAeAlmHdDesc as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(pAeAlmHdDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).iAeAlmHdDesc as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(iAeAlmHdDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).pBayerDecAlmSwDesc as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(pBayerDecAlmSwDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).iBayerDecAlmSwDesc as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(iBayerDecAlmSwDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).pBayerDecAlmHdDesc as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(pBayerDecAlmHdDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).iBayerDecAlmHdDesc as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(iBayerDecAlmHdDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkCameraCapbility>())).sExposeDesc as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(sExposeDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).sResolutionRange as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(sResolutionRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).sRgbGainRange as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(sRgbGainRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).sSaturationRange as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(sSaturationRange)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkCameraCapbility>())).sGammaRange as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(sGammaRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).sContrastRange as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(sContrastRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).sSharpnessRange as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(sSharpnessRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tSdkCameraCapbility>())).sIspCapacity as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkCameraCapbility),
            "::",
            stringify!(sIspCapacity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct tSdkFrameHead {
    pub uiMediaType: UINT,
    pub uBytes: UINT,
    pub iWidth: INT,
    pub iHeight: INT,
    pub iWidthZoomSw: INT,
    pub iHeightZoomSw: INT,
    pub bIsTrigger: BOOL,
    pub uiTimeStamp: UINT,
    pub uiExpTime: UINT,
    pub fAnalogGain: f32,
    pub iGamma: INT,
    pub iContrast: INT,
    pub iSaturation: INT,
    pub fRgain: f32,
    pub fGgain: f32,
    pub fBgain: f32,
}
#[test]
fn bindgen_test_layout_tSdkFrameHead() {
    assert_eq!(
        ::std::mem::size_of::<tSdkFrameHead>(),
        64usize,
        concat!("Size of: ", stringify!(tSdkFrameHead))
    );
    assert_eq!(
        ::std::mem::align_of::<tSdkFrameHead>(),
        4usize,
        concat!("Alignment of ", stringify!(tSdkFrameHead))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkFrameHead>())).uiMediaType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkFrameHead),
            "::",
            stringify!(uiMediaType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkFrameHead>())).uBytes as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkFrameHead),
            "::",
            stringify!(uBytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkFrameHead>())).iWidth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkFrameHead),
            "::",
            stringify!(iWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkFrameHead>())).iHeight as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkFrameHead),
            "::",
            stringify!(iHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkFrameHead>())).iWidthZoomSw as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkFrameHead),
            "::",
            stringify!(iWidthZoomSw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkFrameHead>())).iHeightZoomSw as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkFrameHead),
            "::",
            stringify!(iHeightZoomSw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkFrameHead>())).bIsTrigger as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkFrameHead),
            "::",
            stringify!(bIsTrigger)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkFrameHead>())).uiTimeStamp as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkFrameHead),
            "::",
            stringify!(uiTimeStamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkFrameHead>())).uiExpTime as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkFrameHead),
            "::",
            stringify!(uiExpTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkFrameHead>())).fAnalogGain as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkFrameHead),
            "::",
            stringify!(fAnalogGain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkFrameHead>())).iGamma as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkFrameHead),
            "::",
            stringify!(iGamma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkFrameHead>())).iContrast as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkFrameHead),
            "::",
            stringify!(iContrast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkFrameHead>())).iSaturation as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkFrameHead),
            "::",
            stringify!(iSaturation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkFrameHead>())).fRgain as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkFrameHead),
            "::",
            stringify!(fRgain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkFrameHead>())).fGgain as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkFrameHead),
            "::",
            stringify!(fGgain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tSdkFrameHead>())).fBgain as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(tSdkFrameHead),
            "::",
            stringify!(fBgain)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sCameraFrame {
    pub head: tSdkFrameHead,
    pub pBuffer: *mut BYTE,
}
#[test]
fn bindgen_test_layout_sCameraFrame() {
    assert_eq!(
        ::std::mem::size_of::<sCameraFrame>(),
        72usize,
        concat!("Size of: ", stringify!(sCameraFrame))
    );
    assert_eq!(
        ::std::mem::align_of::<sCameraFrame>(),
        8usize,
        concat!("Alignment of ", stringify!(sCameraFrame))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sCameraFrame>())).head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sCameraFrame),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sCameraFrame>())).pBuffer as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sCameraFrame),
            "::",
            stringify!(pBuffer)
        )
    );
}
pub type tSdkFrame = sCameraFrame;
pub type CAMERA_SNAP_PROC = ::std::option::Option<
    unsafe extern "C" fn(
        hCamera: CameraHandle,
        pFrameBuffer: *mut BYTE,
        pFrameHead: *mut tSdkFrameHead,
        pContext: PVOID,
    ),
>;
pub type CAMERA_PAGE_MSG_PROC = ::std::option::Option<
    unsafe extern "C" fn(hCamera: CameraHandle, MSG: UINT, uParam: UINT, pContext: PVOID),
>;
pub type CAMERA_CONNECTION_STATUS_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(hCamera: CameraHandle, MSG: UINT, uParam: UINT, pContext: PVOID),
>;
extern "C" {
    pub fn CameraSdkInit(iLanguageSel: ::std::os::raw::c_int) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetDataDirectory(dirname: *const ::std::os::raw::c_char) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraUSBDeviceInit() -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraUSBDeviceUninit() -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraEnumerateDevice(
        pCameraList: *mut tSdkCameraDevInfo,
        piNums: *mut INT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraIdleStateDevice(
        pCameraList: *mut tSdkCameraDevInfo,
        piNums: *mut INT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraEnumerateDeviceEx() -> INT;
}
extern "C" {
    pub fn CameraIsOpened(
        pCameraList: *mut tSdkCameraDevInfo,
        pOpened: *mut BOOL,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraInit(
        pCameraInfo: *mut tSdkCameraDevInfo,
        emParamLoadMode: ::std::os::raw::c_int,
        emTeam: ::std::os::raw::c_int,
        pCameraHandle: *mut CameraHandle,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraInitEx(
        iDeviceIndex: ::std::os::raw::c_int,
        iParamLoadMode: ::std::os::raw::c_int,
        emTeam: ::std::os::raw::c_int,
        pCameraHandle: *mut CameraHandle,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraInitEx2(
        CameraName: *mut ::std::os::raw::c_char,
        pCameraHandle: *mut CameraHandle,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetCallbackFunction(
        hCamera: CameraHandle,
        pCallBack: CAMERA_SNAP_PROC,
        pContext: PVOID,
        pCallbackOld: *mut CAMERA_SNAP_PROC,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraUnInit(hCamera: CameraHandle) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetInformation(
        hCamera: CameraHandle,
        pbuffer: *mut *mut ::std::os::raw::c_char,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraImageProcess(
        hCamera: CameraHandle,
        pbyIn: *mut BYTE,
        pbyOut: *mut BYTE,
        pFrInfo: *mut tSdkFrameHead,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraImageProcessEx(
        hCamera: CameraHandle,
        pbyIn: *mut BYTE,
        pbyOut: *mut BYTE,
        pFrInfo: *mut tSdkFrameHead,
        uOutFormat: UINT,
        uReserved: UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraDisplayInit(hCamera: CameraHandle, hWndDisplay: HWND) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraDisplayRGB24(
        hCamera: CameraHandle,
        pbyRGB24: *mut BYTE,
        pFrInfo: *mut tSdkFrameHead,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetDisplayMode(hCamera: CameraHandle, iMode: INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetDisplayOffset(
        hCamera: CameraHandle,
        iOffsetX: ::std::os::raw::c_int,
        iOffsetY: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetDisplaySize(
        hCamera: CameraHandle,
        iWidth: INT,
        iHeight: INT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetImageBuffer(
        hCamera: CameraHandle,
        pFrameInfo: *mut tSdkFrameHead,
        pbyBuffer: *mut *mut BYTE,
        wTimes: UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetImageBufferEx(
        hCamera: CameraHandle,
        piWidth: *mut INT,
        piHeight: *mut INT,
        wTimes: UINT,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn CameraSnapToBuffer(
        hCamera: CameraHandle,
        pFrameInfo: *mut tSdkFrameHead,
        pbyBuffer: *mut *mut BYTE,
        uWaitTimeMs: UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraReleaseImageBuffer(hCamera: CameraHandle, pbyBuffer: *mut BYTE)
        -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraPlay(hCamera: CameraHandle) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraPause(hCamera: CameraHandle) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraStop(hCamera: CameraHandle) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraInitRecord(
        hCamera: CameraHandle,
        iFormat: ::std::os::raw::c_int,
        pcSavePath: *mut ::std::os::raw::c_char,
        b2GLimit: BOOL,
        dwQuality: DWORD,
        iFrameRate: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraStopRecord(hCamera: CameraHandle) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraPushFrame(
        hCamera: CameraHandle,
        pbyImageBuffer: *mut BYTE,
        pFrInfo: *mut tSdkFrameHead,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSaveImage(
        hCamera: CameraHandle,
        lpszFileName: *mut ::std::os::raw::c_char,
        pbyImageBuffer: *mut BYTE,
        pFrInfo: *mut tSdkFrameHead,
        byFileType: BYTE,
        byQuality: BYTE,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetImageResolution(
        hCamera: CameraHandle,
        psCurVideoSize: *mut tSdkImageResolution,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetImageResolution(
        hCamera: CameraHandle,
        pImageResolution: *mut tSdkImageResolution,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetMediaType(hCamera: CameraHandle, piMediaType: *mut INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetMediaType(hCamera: CameraHandle, iMediaType: INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetAeState(hCamera: CameraHandle, bAeState: BOOL) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetAeState(hCamera: CameraHandle, pAeState: *mut BOOL) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetSharpness(
        hCamera: CameraHandle,
        iSharpness: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetSharpness(
        hCamera: CameraHandle,
        piSharpness: *mut ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetLutMode(
        hCamera: CameraHandle,
        emLutMode: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetLutMode(
        hCamera: CameraHandle,
        pemLutMode: *mut ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSelectLutPreset(
        hCamera: CameraHandle,
        iSel: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetLutPresetSel(
        hCamera: CameraHandle,
        piSel: *mut ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetCustomLut(
        hCamera: CameraHandle,
        iChannel: ::std::os::raw::c_int,
        pLut: *mut USHORT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetCustomLut(
        hCamera: CameraHandle,
        iChannel: ::std::os::raw::c_int,
        pLut: *mut USHORT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetCurrentLut(
        hCamera: CameraHandle,
        iChannel: ::std::os::raw::c_int,
        pLut: *mut USHORT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetWbMode(hCamera: CameraHandle, bAuto: BOOL) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetWbMode(hCamera: CameraHandle, pbAuto: *mut BOOL) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetPresetClrTemp(
        hCamera: CameraHandle,
        iSel: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetPresetClrTemp(
        hCamera: CameraHandle,
        piSel: *mut ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetUserClrTempGain(
        hCamera: CameraHandle,
        iRgain: ::std::os::raw::c_int,
        iGgain: ::std::os::raw::c_int,
        iBgain: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetUserClrTempGain(
        hCamera: CameraHandle,
        piRgain: *mut ::std::os::raw::c_int,
        piGgain: *mut ::std::os::raw::c_int,
        piBgain: *mut ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetUserClrTempMatrix(hCamera: CameraHandle, pMatrix: *mut f32) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetUserClrTempMatrix(hCamera: CameraHandle, pMatrix: *mut f32) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetClrTempMode(
        hCamera: CameraHandle,
        iMode: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetClrTempMode(
        hCamera: CameraHandle,
        pimode: *mut ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetOnceWB(hCamera: CameraHandle) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetOnceBB(hCamera: CameraHandle) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetAeTarget(
        hCamera: CameraHandle,
        iAeTarget: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetAeTarget(
        hCamera: CameraHandle,
        piAeTarget: *mut ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetAeExposureRange(
        hCamera: CameraHandle,
        fMinExposureTime: f64,
        fMaxExposureTime: f64,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetAeExposureRange(
        hCamera: CameraHandle,
        fMinExposureTime: *mut f64,
        fMaxExposureTime: *mut f64,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetAeAnalogGainRange(
        hCamera: CameraHandle,
        iMinAnalogGain: ::std::os::raw::c_int,
        iMaxAnalogGain: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetAeAnalogGainRange(
        hCamera: CameraHandle,
        iMinAnalogGain: *mut ::std::os::raw::c_int,
        iMaxAnalogGain: *mut ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetAeThreshold(
        hCamera: CameraHandle,
        iThreshold: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetAeThreshold(
        hCamera: CameraHandle,
        iThreshold: *mut ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetExposureTime(hCamera: CameraHandle, fExposureTime: f64) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetExposureLineTime(
        hCamera: CameraHandle,
        pfLineTime: *mut f64,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetExposureTime(
        hCamera: CameraHandle,
        pfExposureTime: *mut f64,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetExposureTimeRange(
        hCamera: CameraHandle,
        pfMin: *mut f64,
        pfMax: *mut f64,
        pfStep: *mut f64,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetMultiExposureTime(
        hCamera: CameraHandle,
        index: ::std::os::raw::c_int,
        fExposureTime: f64,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetMultiExposureTime(
        hCamera: CameraHandle,
        index: ::std::os::raw::c_int,
        fExposureTime: *mut f64,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetMultiExposureCount(
        hCamera: CameraHandle,
        count: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetMultiExposureCount(
        hCamera: CameraHandle,
        count: *mut ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetMultiExposureMaxCount(
        hCamera: CameraHandle,
        max_count: *mut ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetAnalogGain(hCamera: CameraHandle, iAnalogGain: INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetAnalogGain(hCamera: CameraHandle, piAnalogGain: *mut INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetGain(
        hCamera: CameraHandle,
        iRGain: ::std::os::raw::c_int,
        iGGain: ::std::os::raw::c_int,
        iBGain: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetGain(
        hCamera: CameraHandle,
        piRGain: *mut ::std::os::raw::c_int,
        piGGain: *mut ::std::os::raw::c_int,
        piBGain: *mut ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetGamma(hCamera: CameraHandle, iGamma: ::std::os::raw::c_int) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetGamma(
        hCamera: CameraHandle,
        piGamma: *mut ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetContrast(
        hCamera: CameraHandle,
        iContrast: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetContrast(
        hCamera: CameraHandle,
        piContrast: *mut ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetSaturation(
        hCamera: CameraHandle,
        iSaturation: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetSaturation(
        hCamera: CameraHandle,
        piSaturation: *mut ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetMonochrome(hCamera: CameraHandle, bEnable: BOOL) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetMonochrome(hCamera: CameraHandle, pbEnable: *mut BOOL) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetInverse(hCamera: CameraHandle, bEnable: BOOL) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetInverse(hCamera: CameraHandle, pbEnable: *mut BOOL) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetAntiFlick(hCamera: CameraHandle, bEnable: BOOL) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetAntiFlick(hCamera: CameraHandle, pbEnable: *mut BOOL) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetLightFrequency(
        hCamera: CameraHandle,
        piFrequencySel: *mut ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetLightFrequency(
        hCamera: CameraHandle,
        iFrequencySel: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetFrameSpeed(
        hCamera: CameraHandle,
        iFrameSpeed: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetFrameSpeed(
        hCamera: CameraHandle,
        piFrameSpeed: *mut ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetFrameRate(
        hCamera: CameraHandle,
        RateHZ: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetFrameRate(
        hCamera: CameraHandle,
        RateHZ: *mut ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetParameterMode(
        hCamera: CameraHandle,
        iMode: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetParameterMode(
        hCamera: CameraHandle,
        piTarget: *mut ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetParameterMask(hCamera: CameraHandle, uMask: UINT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSaveParameter(
        hCamera: CameraHandle,
        iTeam: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSaveParameterToFile(
        hCamera: CameraHandle,
        sFileName: *mut ::std::os::raw::c_char,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraReadParameterFromFile(
        hCamera: CameraHandle,
        sFileName: *mut ::std::os::raw::c_char,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraLoadParameter(
        hCamera: CameraHandle,
        iTeam: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetCurrentParameterGroup(
        hCamera: CameraHandle,
        piTeam: *mut ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetTransPackLen(hCamera: CameraHandle, iPackSel: INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetTransPackLen(hCamera: CameraHandle, piPackSel: *mut INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraIsAeWinVisible(hCamera: CameraHandle, pbIsVisible: *mut BOOL) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetAeWinVisible(hCamera: CameraHandle, bIsVisible: BOOL) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetAeWindow(
        hCamera: CameraHandle,
        piHOff: *mut INT,
        piVOff: *mut INT,
        piWidth: *mut INT,
        piHeight: *mut INT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetAeWindow(
        hCamera: CameraHandle,
        iHOff: ::std::os::raw::c_int,
        iVOff: ::std::os::raw::c_int,
        iWidth: ::std::os::raw::c_int,
        iHeight: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetMirror(
        hCamera: CameraHandle,
        iDir: ::std::os::raw::c_int,
        bEnable: BOOL,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetMirror(
        hCamera: CameraHandle,
        iDir: ::std::os::raw::c_int,
        pbEnable: *mut BOOL,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetHardwareMirror(
        hCamera: CameraHandle,
        iDir: ::std::os::raw::c_int,
        bEnable: BOOL,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetHardwareMirror(
        hCamera: CameraHandle,
        iDir: ::std::os::raw::c_int,
        pbEnable: *mut BOOL,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetRotate(hCamera: CameraHandle, iRot: ::std::os::raw::c_int) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetRotate(
        hCamera: CameraHandle,
        iRot: *mut ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetWbWindow(
        hCamera: CameraHandle,
        PiHOff: *mut INT,
        PiVOff: *mut INT,
        PiWidth: *mut INT,
        PiHeight: *mut INT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetWbWindow(
        hCamera: CameraHandle,
        iHOff: INT,
        iVOff: INT,
        iWidth: INT,
        iHeight: INT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraIsWbWinVisible(hCamera: CameraHandle, pbShow: *mut BOOL) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetWbWinVisible(hCamera: CameraHandle, bShow: BOOL) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraImageOverlay(
        hCamera: CameraHandle,
        pRgbBuffer: *mut BYTE,
        pFrInfo: *mut tSdkFrameHead,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetCrossLine(
        hCamera: CameraHandle,
        iLine: ::std::os::raw::c_int,
        x: INT,
        y: INT,
        uColor: UINT,
        bVisible: BOOL,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetCrossLine(
        hCamera: CameraHandle,
        iLine: INT,
        px: *mut INT,
        py: *mut INT,
        pcolor: *mut UINT,
        pbVisible: *mut BOOL,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetCapability(
        hCamera: CameraHandle,
        pCameraInfo: *mut tSdkCameraCapbility,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetCapabilityEx(
        sDeviceModel: *mut ::std::os::raw::c_char,
        pCameraInfo: *mut tSdkCameraCapbility,
        hCameraHandle: PVOID,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraWriteSN(hCamera: CameraHandle, pbySN: *mut BYTE, iLevel: INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraReadSN(hCamera: CameraHandle, pbySN: *mut BYTE, iLevel: INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetTriggerDelayTime(hCamera: CameraHandle, uDelayTimeUs: UINT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetTriggerDelayTime(
        hCamera: CameraHandle,
        puDelayTimeUs: *mut UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetTriggerPeriodTime(hCamera: CameraHandle, time: UINT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetTriggerPeriodTime(hCamera: CameraHandle, time: *mut UINT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetTriggerCount(hCamera: CameraHandle, iCount: INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetTriggerCount(hCamera: CameraHandle, piCount: *mut INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSoftTrigger(hCamera: CameraHandle) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetTriggerMode(
        hCamera: CameraHandle,
        iModeSel: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetTriggerMode(hCamera: CameraHandle, piModeSel: *mut INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetStrobeMode(hCamera: CameraHandle, iMode: INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetStrobeMode(hCamera: CameraHandle, piMode: *mut INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetStrobeDelayTime(hCamera: CameraHandle, uDelayTimeUs: UINT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetStrobeDelayTime(
        hCamera: CameraHandle,
        upDelayTimeUs: *mut UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetStrobePulseWidth(hCamera: CameraHandle, uTimeUs: UINT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetStrobePulseWidth(hCamera: CameraHandle, upTimeUs: *mut UINT)
        -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetStrobePolarity(hCamera: CameraHandle, uPolarity: INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetStrobePolarity(hCamera: CameraHandle, upPolarity: *mut INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetExtTrigSignalType(hCamera: CameraHandle, iType: INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetExtTrigSignalType(hCamera: CameraHandle, ipType: *mut INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetExtTrigShutterType(hCamera: CameraHandle, iType: INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetExtTrigShutterType(hCamera: CameraHandle, ipType: *mut INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetExtTrigDelayTime(hCamera: CameraHandle, uDelayTimeUs: UINT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetExtTrigDelayTime(
        hCamera: CameraHandle,
        upDelayTimeUs: *mut UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetExtTrigBufferedDelayTime(
        hCamera: CameraHandle,
        uDelayTimeUs: UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetExtTrigBufferedDelayTime(
        hCamera: CameraHandle,
        puDelayTimeUs: *mut UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetExtTrigIntervalTime(hCamera: CameraHandle, uTimeUs: UINT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetExtTrigIntervalTime(
        hCamera: CameraHandle,
        upTimeUs: *mut UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetExtTrigJitterTime(hCamera: CameraHandle, uTimeUs: UINT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetExtTrigJitterTime(
        hCamera: CameraHandle,
        upTimeUs: *mut UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetExtTrigCapability(
        hCamera: CameraHandle,
        puCapabilityMask: *mut UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetResolutionForSnap(
        hCamera: CameraHandle,
        pImageResolution: *mut tSdkImageResolution,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetResolutionForSnap(
        hCamera: CameraHandle,
        pImageResolution: *mut tSdkImageResolution,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraCustomizeResolution(
        hCamera: CameraHandle,
        pImageCustom: *mut tSdkImageResolution,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraCustomizeReferWin(
        hCamera: CameraHandle,
        iWinType: INT,
        hParent: HWND,
        piHOff: *mut INT,
        piVOff: *mut INT,
        piWidth: *mut INT,
        piHeight: *mut INT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraShowSettingPage(hCamera: CameraHandle, bShow: BOOL) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraCreateSettingPage(
        hCamera: CameraHandle,
        hParent: HWND,
        pWinText: *mut ::std::os::raw::c_char,
        pCallbackFunc: CAMERA_PAGE_MSG_PROC,
        pCallbackCtx: PVOID,
        uReserved: UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraCreateSettingPageEx(hCamera: CameraHandle) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetActiveSettingSubPage(hCamera: CameraHandle, index: INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSpecialControl(
        hCamera: CameraHandle,
        dwCtrlCode: DWORD,
        dwParam: DWORD,
        lpData: LPVOID,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetFrameStatistic(
        hCamera: CameraHandle,
        psFrameStatistic: *mut tSdkFrameStatistic,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetStatisticResend(
        hCamera: CameraHandle,
        pResendCount: *mut UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetNoiseFilter(hCamera: CameraHandle, bEnable: BOOL) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetNoiseFilterState(hCamera: CameraHandle, pEnable: *mut BOOL) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraRstTimeStamp(hCamera: CameraHandle) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSaveUserData(
        hCamera: CameraHandle,
        uStartAddr: UINT,
        pbData: *mut BYTE,
        ilen: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraLoadUserData(
        hCamera: CameraHandle,
        uStartAddr: UINT,
        pbData: *mut BYTE,
        ilen: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetFriendlyName(
        hCamera: CameraHandle,
        pName: *mut ::std::os::raw::c_char,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetFriendlyName(
        hCamera: CameraHandle,
        pName: *mut ::std::os::raw::c_char,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSdkGetVersionString(
        pVersionString: *mut ::std::os::raw::c_char,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraCheckFwUpdate(hCamera: CameraHandle, pNeedUpdate: *mut BOOL) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetFirmwareVersion(
        hCamera: CameraHandle,
        pVersion: *mut ::std::os::raw::c_char,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetEnumInfo(
        hCamera: CameraHandle,
        pCameraInfo: *mut tSdkCameraDevInfo,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetInerfaceVersion(
        hCamera: CameraHandle,
        pVersion: *mut ::std::os::raw::c_char,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetIOState(
        hCamera: CameraHandle,
        iOutputIOIndex: INT,
        uState: UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetOutPutIOState(
        hCamera: CameraHandle,
        iOutputIOIndex: INT,
        puState: *mut UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetIOState(
        hCamera: CameraHandle,
        iInputIOIndex: INT,
        puState: *mut UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetInPutIOMode(
        hCamera: CameraHandle,
        iInputIOIndex: INT,
        iMode: INT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetInPutIOMode(
        hCamera: CameraHandle,
        iInputIOIndex: INT,
        piMode: *mut INT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetOutPutIOMode(
        hCamera: CameraHandle,
        iOutputIOIndex: INT,
        iMode: INT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetOutPutIOMode(
        hCamera: CameraHandle,
        iOutputIOIndex: INT,
        piMode: *mut INT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetInPutIOModeCapbility(
        hCamera: CameraHandle,
        iInputIOIndex: INT,
        piCapbility: *mut UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetOutPutIOModeCapbility(
        hCamera: CameraHandle,
        iOutputIOIndex: INT,
        piCapbility: *mut UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetOutPutPWM(
        hCamera: CameraHandle,
        iOutputIOIndex: INT,
        iCycle: UINT,
        uDuty: UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetRotaryEncDir(hCamera: CameraHandle, dir: INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetRotaryEncDir(hCamera: CameraHandle, dir: *mut INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetRotaryEncFreq(hCamera: CameraHandle, mul: INT, div: INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetRotaryEncFreq(
        hCamera: CameraHandle,
        mul: *mut INT,
        div: *mut INT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetInPutIOFormat(
        hCamera: CameraHandle,
        iInputIOIndex: INT,
        iFormat: INT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetInPutIOFormat(
        hCamera: CameraHandle,
        iInputIOIndex: INT,
        piFormat: *mut INT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetOutPutIOFormat(
        hCamera: CameraHandle,
        iOutputIOIndex: INT,
        iFormat: INT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetOutPutIOFormat(
        hCamera: CameraHandle,
        iOutputIOIndex: INT,
        piFormat: *mut INT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetInPutIOFormatCapbility(
        hCamera: CameraHandle,
        iInputIOIndex: INT,
        piCapbility: *mut UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetOutPutIOFormatCapbility(
        hCamera: CameraHandle,
        iOutputIOIndex: INT,
        piCapbility: *mut UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetOutPutDelayTime(
        hCamera: CameraHandle,
        iOutputIOIndex: INT,
        uDelayTimeUs: UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetOutPutPulseWidth(
        hCamera: CameraHandle,
        iOutputIOIndex: INT,
        uTimeUs: UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetOutPutPolarity(
        hCamera: CameraHandle,
        iOutputIOIndex: INT,
        uPolarity: UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetAeAlgorithm(
        hCamera: CameraHandle,
        iIspProcessor: INT,
        iAeAlgorithmSel: INT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetAeAlgorithm(
        hCamera: CameraHandle,
        iIspProcessor: INT,
        piAlgorithmSel: *mut INT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetBayerDecAlgorithm(
        hCamera: CameraHandle,
        iIspProcessor: INT,
        iAlgorithmSel: INT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetBayerDecAlgorithm(
        hCamera: CameraHandle,
        iIspProcessor: INT,
        piAlgorithmSel: *mut INT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetIspProcessor(hCamera: CameraHandle, iIspProcessor: INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetIspProcessor(
        hCamera: CameraHandle,
        piIspProcessor: *mut INT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetBlackLevel(hCamera: CameraHandle, iBlackLevel: INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetBlackLevel(hCamera: CameraHandle, piBlackLevel: *mut INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetWhiteLevel(hCamera: CameraHandle, iWhiteLevel: INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetWhiteLevel(hCamera: CameraHandle, piWhiteLevel: *mut INT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetIspOutFormat(hCamera: CameraHandle, uFormat: UINT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetIspOutFormat(hCamera: CameraHandle, puFormat: *mut UINT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetErrorString(iStatusCode: CameraSdkStatus) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CameraReConnect(hCamera: CameraHandle) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraConnectTest(hCamera: CameraHandle) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetLedEnable(
        hCamera: CameraHandle,
        index: ::std::os::raw::c_int,
        enable: BOOL,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetLedEnable(
        hCamera: CameraHandle,
        index: ::std::os::raw::c_int,
        enable: *mut BOOL,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetLedOnOff(
        hCamera: CameraHandle,
        index: ::std::os::raw::c_int,
        onoff: BOOL,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetLedOnOff(
        hCamera: CameraHandle,
        index: ::std::os::raw::c_int,
        onoff: *mut BOOL,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetLedDuration(
        hCamera: CameraHandle,
        index: ::std::os::raw::c_int,
        duration: UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetLedDuration(
        hCamera: CameraHandle,
        index: ::std::os::raw::c_int,
        duration: *mut UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetLedBrightness(
        hCamera: CameraHandle,
        index: ::std::os::raw::c_int,
        uBrightness: UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetLedBrightness(
        hCamera: CameraHandle,
        index: ::std::os::raw::c_int,
        uBrightness: *mut UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraAlignMalloc(
        size: ::std::os::raw::c_int,
        align: ::std::os::raw::c_int,
    ) -> *mut BYTE;
}
extern "C" {
    pub fn CameraAlignFree(membuffer: *mut BYTE);
}
extern "C" {
    pub fn CameraCommonCall(
        hCamera: CameraHandle,
        pszCall: *const ::std::os::raw::c_char,
        pszResult: *mut ::std::os::raw::c_char,
        uResultBufSize: UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetEyeCount(
        hCamera: CameraHandle,
        eyecount: *mut ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraMultiEyeImageProcess(
        hCamera: CameraHandle,
        iEyeIndex: ::std::os::raw::c_int,
        pbyIn: *mut BYTE,
        pInFrInfo: *mut tSdkFrameHead,
        pbyOut: *mut BYTE,
        pOutFrInfo: *mut tSdkFrameHead,
        uOutFormat: UINT,
        uReserved: UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetLightingControllerMode(
        hCamera: CameraHandle,
        index: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetLightingControllerState(
        hCamera: CameraHandle,
        index: ::std::os::raw::c_int,
        state: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraFlipFrameBuffer(
        pFrameBuffer: *mut BYTE,
        pFrameHead: *mut tSdkFrameHead,
        Flags: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraConvertFrameBufferFormat(
        hCamera: CameraHandle,
        pInFrameBuffer: *mut BYTE,
        pOutFrameBuffer: *mut BYTE,
        outWidth: ::std::os::raw::c_int,
        outHeight: ::std::os::raw::c_int,
        outMediaType: UINT,
        pFrameHead: *mut tSdkFrameHead,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetFrameID(hCamera: CameraHandle, id: *mut UINT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetFrameTimeStamp(
        hCamera: CameraHandle,
        TimeStampL: *mut UINT,
        TimeStampH: *mut UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetConnectionStatusCallback(
        hCamera: CameraHandle,
        pCallBack: CAMERA_CONNECTION_STATUS_CALLBACK,
        pContext: PVOID,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGigeEnumerateDevice(
        ppIpList: *mut *const ::std::os::raw::c_char,
        numIp: ::std::os::raw::c_int,
        pCameraList: *mut tSdkCameraDevInfo,
        piNums: *mut INT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGigeSetOption(
        optionName: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGigeGetIp(
        pCameraInfo: *mut tSdkCameraDevInfo,
        CamIp: *mut ::std::os::raw::c_char,
        CamMask: *mut ::std::os::raw::c_char,
        CamGateWay: *mut ::std::os::raw::c_char,
        EtIp: *mut ::std::os::raw::c_char,
        EtMask: *mut ::std::os::raw::c_char,
        EtGateWay: *mut ::std::os::raw::c_char,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGigeSetIp(
        pCameraInfo: *mut tSdkCameraDevInfo,
        Ip: *const ::std::os::raw::c_char,
        SubMask: *const ::std::os::raw::c_char,
        GateWay: *const ::std::os::raw::c_char,
        bPersistent: BOOL,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGigeGetMac(
        pCameraInfo: *mut tSdkCameraDevInfo,
        CamMac: *mut ::std::os::raw::c_char,
        EtMac: *mut ::std::os::raw::c_char,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraClearBuffer(hCamera: CameraHandle) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetImageBufferPriority(
        hCamera: CameraHandle,
        pFrameInfo: *mut tSdkFrameHead,
        pbyBuffer: *mut *mut BYTE,
        wTimes: UINT,
        Priority: UINT,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetImageBufferPriorityEx(
        hCamera: CameraHandle,
        piWidth: *mut INT,
        piHeight: *mut INT,
        wTimes: UINT,
        Priority: UINT,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn CameraSoftTriggerEx(hCamera: CameraHandle, uFlags: UINT) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetFrameResendCount(
        hCamera: CameraHandle,
        count: ::std::os::raw::c_int,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetSysOption(
        optionName: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraSetCorrectDeadPixel(hCamera: CameraHandle, bEnable: BOOL) -> CameraSdkStatus;
}
extern "C" {
    pub fn CameraGetCorrectDeadPixel(hCamera: CameraHandle, pbEnable: *mut BOOL)
        -> CameraSdkStatus;
}
